1.아래를 프로그래밍 하시오.

하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

### 문제_01

학생마다 Student 객체를 생성하고 4명의 학생 정보를 `ArrayList<Student> 컬렉션`에 저장한 후에, 
ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력 받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.

import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

class Student{
	private String name;
	private String dept;
	private String stuNum;
	private double avg;
	
	public Student(String name, String dept, String stuNum, double avg) {
		this.name = name;
		this.dept = dept;
		this.stuNum = stuNum;
		this.avg = avg;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDept() {
		return dept;
	}

	public void setDept(String dept) {
		this.dept = dept;
	}

	public String getStuNum() {
		return stuNum;
	}

	public void setStuNum(String stuNum) {
		this.stuNum = stuNum;
	}

	public double getAvg() {
		return avg;
	}

	public void setAvg(double avg) {
		this.avg = avg;
	}
	
	public void findStudentAvg(String name) {
		if(name.equals(this.name)) {
			System.out.println(this.name + "의 평균은 " + this.avg + "입니다.");
		}
	}
}

public static void main(String[] args) {
		final int PEOPLE = 4;
		Scanner sc = new Scanner(System.in);
		ArrayList<Student> stuList = new ArrayList<>();
		
		System.out.println("학생 이름, 학과, 학번, 학점평균 입력하세요.");
		
		for(int i = 0; i < PEOPLE; i++) {
		System.out.print(">>");
		String info = sc.nextLine();
		
		StringTokenizer st = new StringTokenizer(info, ",");
        String name = st.nextToken().trim();
        String department = st.nextToken().trim();
        String number = st.nextToken().trim();
        double grade = Double.valueOf(st.nextToken().trim());

        stuList.add(new Student(name, department, number, grade));
		}
		
		for (int i = 0; i < stuList.size(); i++) {
			Student s = stuList.get(i);
			System.out.println("이름 : " + s.getName());
			System.out.println("학과 : " + s.getDept());
			System.out.println("학번 : " + s.getStuNum());
			System.out.println("학점 : " + s.getAvg());
			System.out.println();
		}
		while(true) {
	        System.out.print("학생 이름 >> ");
	        String name = sc.next();

	        if(name.equals("그만"))
	            break;

	        for(int i=0; i< stuList.size(); i++) {
	            Student s = stuList.get(i);
	            s.findStudentAvg(name);
	        }
	    }
	}


### 문제_02

ArayList<Student> 대신, `HashMap<String, Studnet>` **해시맵을 이용하여 다시 작성**하라. 해시맵에서 키는 학생 이름으로 한다.




2.. 다음을 프로그래밍 하시오. 

"그만"이 입력될 때까지 나라 이름과 인구를 입력 받아 저장하고, 다시 나라 이름을 입력받아 인구를 출력하는 프로그램을 작성하라. 
다음 해시맵을 이용하라.
=================================================================================
나라 이름과 인구를 입력하세요.(예: Korea 5000)
나라 이름, 인구 >> Korea 5000
나라 이름, 인구 >> USA 1000000
나라 이름, 인구 >> Swiss 2000
나라 이름, 인구 >> France 3000
나라 이름, 인구 >> 그만

인구 검색 >> France
France의 인구는 3000
인구 검색 >> 스위스
스위스 나라는 없습니다.
인구 검색 >> 그만

public static void main(String[] args) {
		String country, search;
		int people;
		Scanner sc = new Scanner(System.in);
		HashMap<String, Integer> countryMap = new HashMap<>();
		System.out.println("이름과 인구를 입력하세요.(예: Korea 5000)");

		while (true) {
			System.out.print("나라 이름, 인구 >> ");
			country = sc.next();

			if (country.equals("그만")) {
				while (true) {
					System.out.print("인구 검색 >> ");
					search = sc.next();
					if (search.equals("그만")) {
						System.out.println("프로그램을 종료합니다.");
						return;
					}
						if (countryMap.containsKey(search)) {
							System.out.println(search + "의 인구는 " + countryMap.get(search));
						} else {
							System.out.println(search + "나라는 없습니다.");
						}
				}
			}
			people = sc.nextInt();
			countryMap.put(country, people);
		}
	}

3. 스택과 큐에 대하여 설명하시오.
스택 : 먼저 저장된 데이터가 마지막에 빠져나가는 자료구조(LIFO)
큐 : 먼저 저장된 데이터가 먼저 빠져나가는 자료구조(FIFO)

4. Map 에 대하여 설명하시오.
- Map이란 Key와 Value 기반의 데이터 저장 방식이다.

5.아래의 TreeMap의 전체 Value 값을 확인 하기 위한 소스를 짜시오. 

TreeMap<Integer, String> map = new TreeMap<>();
map.put(45, "Brown");
map.put(37, "James");
map.put(23, "Martin");

Set<Integer> ks = map.keySet();
		
		for(Integer n : ks)
			System.out.println(map.get(n).toString());

6.아래의 IntegerComparator를 내림차순 정렬이 되게끔 구현하시오.

import java.util.Comparator;
import java.util.TreeSet;

class IntegerComparator implements Comparator<Integer>{

	@Override
	public int compare(Integer o1, Integer o2) {
		return o2 - o1;
	}
}

public static void main(String[] args) {
        TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
        tr.add(30);
        tr.add(10);    
        tr.add(20);        
        System.out.println(tr);	
    }
}
