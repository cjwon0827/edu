1. 에러(Error)와 예외(Exception)의 차이는?
- 오류(Error)는 시스템이 종료되어야 할 수준의 상황과 같이 수습할 수 없는 심각한 문제를 의미하고, 개발자가 미리 예측하여 방지할 수 없다.
- 예외(Exception)는 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생하고, 오류와 달리 개발자가 미리 예측하여 방지할 수 있기에 상황에 맞는 예외처리를 해야한다.
  
2. unchecked 와 checked 예외의 차이는?
- unchecked는 RuntimeException을 상속받으며, 컴파일 시점에 예외를 catch 하는지 확인하지 않기 때문에 컴파일 시점에 예외가 발생하는지 여부를 판단할 수 없다.
- checked는 Exception을 바로 상속받으며, 특징으로는 컴파일 시점에 예외를 catch 하는지 정적으로 확인하고 만일 컴파일 시점에 예외처리를 하지 않는다면 컴파일 에러가 발생한다.

3. 예외처리(Exception Handling) UML(상속도)참고하여  그리시오.
- 

4. throws 에 대하여 설명하시오.
- throws절 선언을 통해 예외의 처리를 다른 메서드에 넘길 수 있다.

5. 아래가 컴파일 에러가 나는 이유에 대하여 설명하시오.
try {
		int num = 6 / 0;
} catch (Exception e) {
		e.printStackTrace();
} catch (InputMismatchException e) {
		e.printStackTrace();
}
- try에서 예외가 발생했을 때에는 catch블록이 작성된 순서대로 위에서 아래대로 차례로 검사하는데, 만일 상위 예외 클래스가 더 위에 있었다면 하위 예외 클래스를 실행하지 않게 된다.
  즉, 하위 예외 클래스가 상위 예외 클래스를 상속했기 때문에, 상위 예외 클래스를 잡는 catch 블록이 실행되게된다.

6. 사칙연산 계산기를 아래의 조건으로 짜시오.
interface ICalculator {
	int add(int x, int y);
	int sub(int x, int y);
	int mul(int x, int y);
	int div(int x, int y);
}

class Calculator implements ICalculator{
	@Override
	public int add(int x, int y) {
		return x + y;
	}

	@Override
	public int sub(int x, int y) {
		return x - y;
	}

	@Override
	public int mul(int x, int y) {
		return x * y;
	}

	@Override
	public int div(int x, int y) {
		return x / y;
	}
}

public class CalculatorMain {

	public static void main(String[] args) {
		ICalculator cal = new Calculator();

		//출력결과 참고 하여 try catch 를 적절히 넣을것  
			try {
			System.out.println(cal.add(6, 5));
			System.out.println(cal.sub(6, 5));	
			System.out.println(cal.mul(6, 5));	
			System.out.println(cal.div(6, 0));
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("계산기 종료");
		}

	}
}

/*
================================================
11
1
30
java.lang.ArithmeticException: / by zero
	at Calculator.div(CalculatorMain.java:32)
	at CalculatorMain.main(CalculatorMain.java:45)
계산기 종료
*/
7.과일, 사과, 배, 포도를 표현한 클래스를 만들고 이들 간의 관계를 고려하여 하나의 클래스를 추상 클래스로 만들어 메소드 print()를 구현하고 
다음과 같은 소스와 결과가 나오도록 클래스를 작성하시오.
- 소스
abstract class Fruit{
	public abstract void print();
}

class Grape extends Fruit{
	public void print() {
		System.out.println("나는 포도이다.");
	}
}

class Apple extends Fruit{
	public void print() {
		System.out.println("나는 사과이다.");
	}
}

class Pear extends Fruit{
	public void print() {
		System.out.println("나는 배이다.");
	}
}
public class FruitMain {
	public static void main(String[] args) {
		Fruit fAry[] = {new Grape(), new Apple(), new Pear()};
		for(Fruit f : fAry)
		f.print();
	}
}

- 결과
나는 포도이다.
나는 사과이다.
나는 배이다.
