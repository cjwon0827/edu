1. Generic 메소드에 대하여 설명하시오.
- 제네릭 메소드는 메소드의 선언 부에 적은 제네릭으로 리턴 타입, 파라미터의 타입이 정해지는 메소드이다. 

2.Generic(제네릭) 클래스의 타입 인자 제한하는 방법과 효과는?
- 방법 : class 클래스명<타입 extends 상속받을 클래스 명>
  효과 : 타입 인자에 클래스를 상속받아 상속 받기 전에는 사용할 수 없는 함수를 사용할 수 있게 해준다.
  
3.와일드 카드란?
- 타입 명을 ?로 하여 어떠한 타입이든 대입할 수 있게 해주는 기능이다.

4. 아래가 에러나는 이유를 설명하시오.
class Box<T> {
    private T ob;     
    public void set(T o) { ob = o; }
    public get() { return ob; }
}

...

public static void inBox(Box<? super Toy> box, Toy n) {
   box.set(n);   // 넣는 것! OK!
   Toy myToy = box.get();   // 꺼내는 것! Error!
}

- 자식 클래스에 부모 클래스를 올리려고 하여 에러가 난다.

5. 아래의 소스코드 중에 System.out.println(zBox.get().get().get()); 부분을 설명하시오.


class Box<T> {
	private T ob;
	
	public void set(T o) {
		ob = o;
	}

	public T get() {
		return ob;
	}
}

public class BoxInBox {

	public static void main(String[] args) {
		Box<String> sBox = new Box<>();
		sBox.set("I am so happy.");
	
		Box<Box<String>> wBox = new Box<>();
		wBox.set(sBox);
		
		Box<Box<Box<String>>> zBox = new Box<>();
		zBox.set(wBox);
		
		System.out.println(zBox.get().get().get());
	}
}

6. 아래를 컴파일 에러가 나지 않게끔 프로그래밍 하시오.


    public static void main(String[] args) {
        Box7<Integer> box1 = new Box7<>();
        box1.set(99);

        Box7<Integer> box2 = new Box7<>();
        box2.set(55);

        System.out.println(box1.get() + " & " + box2.get());
        swapBox(box1, box2); 
        System.out.println(box1.get() + " & " + box2.get());
    }
    
public static <T> void swapBox(Box7<T> box1, Box7<T> box2) {
		T t = box1.get();
		box1.set(box2.get());
		box2.set(t);
	}

출력 =========================================

99 & 55
55 & 99

7.Scanner를 이용하여 한 라인을 읽고, 공백으로 분리된 어절이 몇 개 들어 있는지 "그만"을 입력할 때까지 반복하는 프로그램을 작성하라.

>>I love Java.
어절 개수는 3
>>자바는 객체 지향 언어로서 매우 좋은 언어이다.
어절 개수는 7
>>그만
종료합니다...
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.

(1) StringTokenizer 클래스를 이용하여 작성하라.

import java.util.Scanner;
import java.util.StringTokenizer;

public static void main(String[] args) {
		
		while(true) {
		Scanner sc = new Scanner(System.in);
		System.out.print(">>");
		String str = sc.nextLine();
		
		if (str.equals("그만")) {
			System.out.println("종료합니다.");
			return ;
		}
		
		StringTokenizer st = new StringTokenizer(str, " ");
		System.out.println("어절 개수는 " + st.countTokens());
		}
	}
