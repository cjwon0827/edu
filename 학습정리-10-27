1. Maker 인터페이스에 대하여 설명하시오.
- 클래스에 특정 표시를 해 두기 위한 목적으로 정의된 인터페이스를 마커 인터페이스라 한다. 마커 인터페이스에는 구현해야 할 메소드가 없는 경우가 흔하다.

2. 추상 클래스(abstract class)에 대하여 설명하시오.
- 하나 이상의 추상 메소드를 지니는 클래스를 가리켜 추상 클래스라 한다.

3.Exception 에 대하여 설명하시오.
- 단순한 문법 오류가 아닌 실행 중간에 발생하는 ‘정상적이지 않은 상황’을 뜻한다.

4.에러를 내는 주체는?
- JVM

5. 아래의 소스코드를 참고 하여 중에 Main안에 있는 두개의
getAllArea 과 getArea 함수를 완성하시오.
================================
interface AreaGetable {
	double getArea();

}

class Circle implements AreaGetable {
	private double r;

	public Circle(double r) {
		this.r = r;
	}

	@Override
	public double getArea() {

		return r * r * Math.PI;
	}
}

class Rectangle implements AreaGetable {

	private double width, height;

	public Rectangle(double width, double height) {
		this.height = height;
		this.width = width;
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return width * height;
	}
}


class CondOp {
public static double getAllArea(AreaGetable[] area) {
		double sum = 0;
		for (AreaGetable a : area) {
			sum = sum + a.getArea();
		}
		return sum;
	}
	
	public static double getArea(AreaGetable area) {
		return area.getArea();
	}
  
	public static void main(String[] args) {
		AreaGetable[] area = { new Rectangle(4, 5), new Circle(4), new Circle(4), new Circle(5), new Circle(5),
				new Circle(6) ,new Rectangle(4, 5),new Rectangle(4, 5),new Rectangle(4, 5),};

		// AreaGetable oneArea = new Circle(4);
		System.out.println(getAllArea(area));
		System.out.println(getArea(new Circle(10))); //314
		System.out.println(getArea(new Rectangle(4, 5))); //20

		// oneArea = new Rectangle(4,5);
		// System.out.println(area.getArea());

	}
}

6. 아래의 결과를 나타내는 사칙연산 계산기를 완성하시오.
-주의 잘못된 입력이 있으면 처음부터 다시 입력을 받도록 
예외처리 구문(try catch)을 넣을것


*** 계산기 ***
수1 : 10
수2 : 20
연산 : +
계산 결과 : 30
계속 하시겠습니까? 계속 : Y , 종료 : N
y
*** 계산기 ***
수1 : R
잘못된 입력입니다. 다시입력해 주세요
*** 계산기 ***
수1 : 10
수2 : 20
연산 : *
계산 결과 : 200
계속 하시겠습니까? 계속 : Y , 종료 : N
y
*** 계산기 ***
수1 : 90
수2 : 80
연산 : /
계산 결과 : 1
계속 하시겠습니까? 계속 : Y , 종료 : N
n
종료입니다.

import java.util.Scanner;

class Cal{
	private int num1, num2, result;
	private String op;
	public Cal(int num1, int num2, String op) {
		this.num1 = num1;
		this.num2 = num2;
		this.op = op;
	}
	public void resultNum(int num1, int num2) {
			switch (op) {
			case "+": 
				result = num1 + num2;
				System.out.println("계산 결과 : " + result);
				break;
			case "-":
				result = num1 - num2;
				System.out.println("계산 결과 : " + result);
				break;
			case "*":
				result = num1 * num2;
				System.out.println("계산 결과 : " + result);
				break;
			case "/":
				result = num1 / num2;
				System.out.println("계산 결과 : " + result);
				break;
			default:
				System.out.println("잘못된 연산자 입력입니다.");
		}
	}
}

public class Calculator {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num1, num2;
		String op, choice;
		
		while(true) {
			try {
		Scanner sc = new Scanner(System.in);
		System.out.println("*** 계산기 ***");
		System.out.print("수1 : ");
		num1 = sc.nextInt();
		System.out.print("수2 : ");
		num2 = sc.nextInt();
		System.out.print("연산 : ");
		op = sc.next();
		Cal cal = new Cal(num1, num2, op);
		cal.resultNum(num1, num2);
		
		System.out.println("계속 하시겠습니까? 계속 Y, 종료 N");
		choice = sc.next();
		if(choice.equals("N") || choice.equals("n")) {
			System.out.println("프로그램을 종료합니다.");
			break;
		}
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다. 처음부터 다시 입력해주세요");
			continue;
		}
		} 
	}
}
